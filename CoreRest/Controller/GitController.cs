using CoreRest.Service;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Net;

namespace CoreRest.Controller
{
    [ApiController]
    [Route("[controller]")]
    public class GitController : ControllerBase
    {
        public readonly IGitService _gitService;
        public readonly IConfiguration _configuration;

        public GitController(IConfiguration configuration, IGitService gitService)
        {
            _configuration = configuration;
            _gitService = gitService;
        }

        /// <summary>
        /// Authenticate in Git platform
        /// </summary>
        /// <param name="token">Token generated by git</param>
        /// <returns></returns>
        [HttpGet("auth/{token}")]
        public IActionResult Auth(string token)
        {
            try
            {
                var s = _gitService.Auth(token);
                return Ok(s);
            }

            catch (Exception e)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, e);
            }
        }

        /// <summary>
        /// Get all starred projects for logged user
        /// </summary>
        /// <param name="token">Token generated by git</param>
        /// <returns></returns>
        [HttpGet("ownstarredprojects/{token}")]
        public IActionResult OwnStarredProjects(string token)
        {
            try
            {
                var login = _gitService.Auth(token);
                var data = _gitService.GetStarredProjectsForUser(login.login);
                return Ok(data);
            }

            catch (Exception e)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, e);
            }
        }

        /// <summary>
        /// Replace GPL project for non GPL projects
        /// </summary>
        /// <param name="token">Token generated by git</param>
        /// <returns></returns>
        [HttpGet("getcorrectrepos/{token}")]
        public IActionResult GetCorrectRepos(string token)
        {
            try
            {
                var data = _gitService.GetCorrectRepositoriesData(token);
                return Ok(data);
            }

            catch (Exception e)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, e.Message);
            }
        }

        /// <summary>
        /// Get user information
        /// </summary>
        /// <param name="user">Name of the user</param>
        /// <returns></returns>
        [HttpGet("user/{user}")]
        public IActionResult GetUser(string user)
        {
            try
            {
                var s = _gitService.GetUser(user);
                return Ok(s);
            }

            catch (Exception e)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, e);
            }
        }

        /// <summary>
        /// Get all starred projects of the specified user
        /// </summary>
        /// <param name="user">Name of the user</param>
        /// <returns></returns>
        [HttpGet("user/{user}/starredprojects")]
        public IActionResult GetStarredProjectsForUser(string user)
        {
            try
            {
                var s = _gitService.GetStarredProjectsForUser(user);
                return Ok(s);
            }

            catch (Exception e)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, e);

            }
        }
    }
}
